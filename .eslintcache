[{"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\index.js":"1","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\App.js":"2","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\reportWebVitals.js":"3","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\ToDoItems\\ToDoItems.jsx":"4","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\ToDoList\\ToDoList.jsx":"5","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\ToDoXml\\ToDoXml.jsx":"6","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\BarChart\\todoChart.jsx":"7","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\BarChart\\ToDoChart.jsx":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":187,"mtime":1607744347778,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":4428,"mtime":1608784262928,"results":"13","hashOfConfig":"10"},{"size":3821,"mtime":1608782374766,"results":"14","hashOfConfig":"10"},{"size":225,"mtime":1607642915187,"results":"15","hashOfConfig":"16"},{"size":1314,"mtime":1607659526687,"results":"17","hashOfConfig":"16"},{"size":477,"mtime":1608262007196,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"8ibb6s",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"21"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"1fjg1i8",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\index.js",[],["38","39"],"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\App.js",[],"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\reportWebVitals.js",[],"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\ToDoItems\\ToDoItems.jsx",["40","41","42"],"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\ToDoList\\ToDoList.jsx",["43"],"import React from 'react';\r\nimport './ToDoList.css';\r\nimport { Component } from \"react\";\r\nimport ToDoItems from '../ToDoItems/ToDoItems';\r\n\r\n\r\nvar builder = require('xmlbuilder');\r\n\r\nexport default class ToDoList extends Component {\r\n    constructor() {\r\n        super();\r\n       /* Declaring State Variables */\r\n        this.state ={\r\n           val: '',\r\n           list: [],\r\n          \r\n        }\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n }\r\n\r\n  /* The handlesubmit is being called on form submit\r\n     To Add todolist items */     \r\n     handleChange = (event) => {\r\n            this.setState({\r\n                val:event.target.value\r\n            });      \r\n      }  \r\n\r\n    handleSubmit = (event) => {   \r\n        event.preventDefault();   \r\n        if(this.state.val !== \"\"){  \r\n            //console.log(this.state.val);\r\n            const toDoListArr = {\r\n               text: this.state.val,\r\n               color: 'lightblue',\r\n               key:Date.now(),\r\n               status:'New',\r\n               CreatedTime:Date(),\r\n               updatedTime:Date()\r\n               };\r\n            \r\n               const newItems =  [...this.state.list,toDoListArr]\r\n               this.setState({\r\n                   list:newItems,\r\n                   val:'',\r\n                   key:''\r\n               })\r\n            // this.setState((prevState) => {\r\n            //     return { list : prevState.list.concat(toDoListArr)\r\n            //      };\r\n                \r\n            // });\r\n        }\r\n        else { console.log(\"Please Enter The task\");}\r\n    \r\n        console.log(\"list items\", this.state.list);    \r\n \r\n    }\r\n       /**\r\n         * To write data to a xml file\r\n         */\r\n\r\n    Download = (data) =>{\r\n        var root = builder.create('Todolist');\r\n        root.com('ToDo -List');\r\n        this.state.list.map((todo) => { \r\n            var item = root.ele('Todo');\r\n            item.att('List', todo.text);\r\n            item.att('Id', todo.key);\r\n            item.att('status',todo.status);\r\n            item.att('createdtime',todo.CreatedTime);\r\n            item.att('updatedtie',todo.updatedTime);\r\n         });          \r\n        var xml = root.end({ pretty: true});\r\n        console.log(xml);\r\n\r\n      \r\n         let filename = \"todolist.xml\";\r\n         let text = {xml};\r\n         let blob = new Blob([text], {type:'xml'});\r\n         let link = document.createElement(\"a\");\r\n         link.download = filename;\r\n         //link.innerHTML = \"Download File\";\r\n         link.href = window.URL.createObjectURL(blob);\r\n         document.body.appendChild(link);\r\n         link.click();\r\n         setTimeout(() => {\r\n             document.body.removeChild(link);\r\n             window.URL.revokeObjectURL(link.href);\r\n         }, 100);\r\n     }\r\n\r\n     /* To Delete the todolist item.*/\r\n\r\n    deleteItem(key){\r\n     \r\n        var filteredItems = this.state.list.filter(function (list) {\r\n            return (list.key !== key);\r\n          });\r\n\r\n          this.setState({ \r\n            list: filteredItems\r\n          });\r\n     //console.log(\"In delete\", this.state.list);\r\n    }\r\n  \r\n    render() {\r\n        \r\n        return (\r\n            <div className='toDoListCard'>\r\n            <div className='toDoForm'>\r\n            <form onSubmit={this.handleSubmit}>\r\n            <input type=\"text\"  value={this.state.val} onChange={this.handleChange}  placeholder=\"Enter Your To Do List\"/>\r\n            <button> Add List</button>  \r\n            </form>\r\n            <button onClick={(event) => this.Download(this.state.list)}>Download</button>\r\n            </div>\r\n            <ToDoItems listItems={this.state.list} flag={this.state.dropdownStatus} delete={this.deleteItem}/>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n\r\n}","C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\ToDoXml\\ToDoXml.jsx",[],["44","45"],"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\BarChart\\todoChart.jsx",["46"],"C:\\Users\\sridivya\\skillcrush\\React-JS\\todolist\\src\\components\\BarChart\\ToDoChart.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":22,"column":40,"nodeType":"53","messageId":"54","endLine":22,"endColumn":42},{"ruleId":"51","severity":1,"message":"52","line":56,"column":30,"nodeType":"53","messageId":"54","endLine":56,"endColumn":32},{"ruleId":"51","severity":1,"message":"52","line":79,"column":39,"nodeType":"53","messageId":"54","endLine":79,"endColumn":41},{"ruleId":"51","severity":1,"message":"52","line":67,"column":36,"nodeType":"53","messageId":"54","endLine":67,"endColumn":38},{"ruleId":"47","replacedBy":"55"},{"ruleId":"49","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":3,"column":18,"nodeType":"59","messageId":"60","endLine":3,"endColumn":22},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["61"],["62"],"no-unused-vars","'Cell' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]